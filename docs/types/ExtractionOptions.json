{
  "$schema": "https://raw.githubusercontent.com/sims4toolkit/misc/main/json-schemas/docs-item-schema.json",
  "imports": [
    "import type { ExtractionOptions } from \"@s4tk/extraction\"; // TypeScript only"
  ],
  "header": {
    "title": {
      "prefix": "interface",
      "name": "ExtractionOptions"
    },
    "description": "Optional arguments for extracting tuning.",
    "sourceCode": "src/lib/options.ts"
  },
  "sections": [
    {
      "title": "Properties",
      "content": [
        {
          "displayType": "property",
          "name": "eventListener",
          "description": "A listener that is called every time an event is emitted. An arbitrary number of additional arguments may be passed as well. It is highly recommended that you make this function async.",
          "optional": true,
          "type": {
            "name": "ExtractionEventListener",
            "path": {
              "pkg": "extraction",
              "group": "types",
              "item": "ExtractionEventListener"
            }
          }
        },
        {
          "displayType": "property",
          "name": "extractSimData",
          "description": "Whether or not SimData should be extracted. True by default.",
          "type": {
            "name": "boolean"
          }
        },
        {
          "displayType": "property",
          "name": "extractTuning",
          "description": "Whether or not tuning should be extracted from combined tuning. True by default.",
          "type": {
            "name": "boolean"
          }
        },
        {
          "displayType": "property",
          "name": "includeDeltas",
          "description": "Whether or not to include delta packages. True by default. Either this or includeFullBuilds needs to be true in order to extract anything.",
          "type": {
            "name": "boolean"
          }
        },
        {
          "displayType": "property",
          "name": "includeFullBuilds",
          "description": "Whether or not to include full packages. True by default. Either this or includeDeltas needs to be true in order to extract anything.",
          "type": {
            "name": "boolean"
          }
        },
        {
          "displayType": "property",
          "name": "insertGroupComment",
          "description": "Whether or not to include a comment that tells the S4TK VS Code extension which group to use instead of 0. True by default.",
          "type": {
            "name": "boolean"
          }
        },
        {
          "displayType": "property",
          "name": "namingConvention",
          "description": "Naming convention to use. \"s4s\" by default.",
          "type": {
            "name": "NamingConvention",
            "path": {
              "pkg": "extraction",
              "group": "types",
              "item": "NamingConvention"
            }
          }
        },
        {
          "displayType": "property",
          "name": "restoreComments",
          "description": "Whether or not comments should be added for string keys and tuning IDs. True by default.",
          "type": {
            "name": "boolean"
          }
        },
        {
          "displayType": "property",
          "name": "stringManifest",
          "optional": true,
          "description": "The kind of manifest to generate for strings. The manifest will map string keys (hex strings) to their values. If not provided, no manifest is generated.",
          "type": {
            "name": "ManifestType",
            "path": {
              "pkg": "extraction",
              "group": "types",
              "item": "ManifestType"
            }
          }
        },
        {
          "displayType": "property",
          "name": "targetLocale",
          "description": "If restoring comments, this determines which language is used to restore string comments. English by default.",
          "type": {
            "name": "StringTableLocale",
            "path": {
              "pkg": "models",
              "group": "enums",
              "item": "StringTableLocale"
            }
          }
        },
        {
          "displayType": "property",
          "name": "tuningManifest",
          "optional": true,
          "description": "The kind of manifest to generate for tunings. The manifest will map tuning IDs (decimal strings) to their file names. If not provided, no manifest is generated.",
          "type": {
            "name": "ManifestType",
            "path": {
              "pkg": "extraction",
              "group": "types",
              "item": "ManifestType"
            }
          }
        },
        {
          "displayType": "property",
          "name": "usePackSubfolders",
          "description": "Whether or not to use the pack id (e.g. BG, GP01, SP24) as the first subfolder for all files. False by default.",
          "type": {
            "name": "boolean"
          }
        },
        {
          "displayType": "property",
          "name": "usePrimarySubfolders",
          "description": "Whether or not to use primary subfolders when writing the files. This means tuning type for tuning files, and \"SimData\" for SimData files. True by default.\n\nNote: If useTuningFoldersForSimData is true, then the \"SimData\" folder and all of its subfolders will never be created.",
          "type": {
            "name": "boolean"
          }
        },
        {
          "displayType": "property",
          "name": "useRawPrimarySubfolderNames",
          "description": "For usePrimarySubfolders, whether to format the tuning types as they appear in tunings, instead of the more friendly PascalCase. False by default.",
          "type": {
            "name": "boolean"
          }
        },
        {
          "displayType": "property",
          "name": "useSecondarySubfolders",
          "description": "Whether or not to use secondary subfolders when writing the files. This means class for tuning files, and group for SimData files. True by default.\n\nNote: If useTuningFoldersForSimData is true, then the \"SimData\" folder and all of its subfolders will never be created.",
          "type": {
            "name": "boolean"
          }
        },
        {
          "displayType": "property",
          "name": "useTuningFoldersForSimData",
          "description": "Whether or not to write SimData files to the folder that contains their matching tuning. SimData files will have the same name, but with 'SimData' append before the file extension. True by default.",
          "type": {
            "name": "boolean"
          }
        }
      ]
    }
  ]
}